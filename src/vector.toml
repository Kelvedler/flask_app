[sources.web]
type = "docker_logs"
docker_host = "unix:///var/run/docker.sock"
include_containers = [ "flask_app_web" ]

[transforms.filter]
type = "remap"
inputs = [ "web" ]
source = """
del(.container_created_at)
del(.container_id)
del(.container_name)
del(.host)
del(.image)
del(.label)
del(.source_type)
del(.stream)
del(.timestamp)
"""

[transforms.remap]
type = "remap"
inputs = [ "filter" ]
source = """
is_parsed = false
parsed, err = parse_regex(.message, r'^\\[?(?P<timestamp>\\d+-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+): (?P<severity>\\w+\\/?\\w*)\\]? (?P<message>.*)$')
if err == null {
    . |= parsed
    is_parsed = true

    sub_parsed, err = parse_regex(.message, r'(?P<ip>(?:\\d{1,3}\\.){3}\\d{1,3}\\b|\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4})[^"]*"(?P<message>[^\\/]*)(?P<path>[^\\\\]*)[^"]*"[^"]*"(?P<agent>[^"]*)"$')
    if err == null {
        . |= sub_parsed
    } else {
        . |= {
            "ip": "",
            "path": "",
            "agent": ""
        }
    }

    . |= {
            "http_method": "",
            "status_code": "",
        }
} else {
    parsed, err = parse_regex(.message, r'^\\[(?P<timestamp>\\d+\\/\\w+\\/\\d+:\\d+:\\d+:\\d+ \\+\\d+)\\] (?P<ip>(?:\\d{1,3}\\.){3}\\d{1,3}\\b|\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4})[^"]*"(?P<http_method>GET|POST|PUT|PATCH|DELETE) (?P<path>\\/[^ ]*)[^"]*" (?P<status_code>\\d+)[^"]*"(?P<agent>[^"]*)"$')
    if err == null {
        is_parsed = true
        . |= parsed
        . |= {"message": ""}
    }
}

if is_parsed == true {
    message_parts = split!(.message, ", ", limit: 2)
    structured = parse_key_value(message_parts[1], key_value_delimiter: ":", field_delimiter: ",") ?? {}
    .message = message_parts[0]
    . = merge(., structured)
}
"""

[sinks.out]
type = "console"
inputs = [ "remap" ]
target = "stdout"

[sinks.out.encoding]
codec = "json"
